{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"MkDocs SpellCheck","text":"<p>A spell checker plugin for MkDocs.</p> <p>This plugin can use different backends to check the spelling of words in your final HTML pages. These backends are:</p> <ul> <li><code>codespell</code></li> <li><code>symspellpy</code></li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install all backends, use the <code>all</code> extra. Otherwise specify the name(s) of the backend(s) as extra.</p> <pre><code>pip install 'mkdocs-spellcheck[all]'\npip install 'mkdocs-spellcheck[codespell]'\npip install 'mkdocs-spellcheck[symspellpy]'\npip install 'mkdocs-spellcheck[codespell,symspellpy]'\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code># mkdocs.yml\nplugins:\n- search\n- spellcheck:\n    backends:  # the backends you want to use\n    - symspellpy  # as strings\n    - codespell:  # or nested configs\n        dictionaries: [clear, rare]\n\n    # known_words can also be a list of words\n    known_words: known_words.txt\n\n    # ignore words in &lt;code&gt; tags\n    ignore_code: yes\n\n    # minimum length of words to consider\n    min_length: 2\n\n    # maximum number of capital letters in a word\n    max_capital: 1\n\n    # keep unicode characters\n    allow_unicode: no\n\n    # skip files entirely (supports Unix shell-style wildcards)\n    skip_files:\n    - credits.md\n    - coverage.md\n    - reference/*\n\n    # whether to only check in strict mode\n    strict_only: yes\n</code></pre> <p>By default, the <code>symspellpy</code> backend is used.</p> <p>Once your configuration is ready, just run <code>mkdocs build -s</code> to check the spelling inside your pages.</p>"},{"location":"#codespell","title":"<code>codespell</code>","text":"<p>The builtin dictionaries are:</p> <ul> <li><code>clear</code> for unambiguous errors</li> <li><code>rare</code> for rare (but valid) words that are likely to be errors</li> <li><code>informal</code> for making informal words more formal</li> <li><code>usage</code> for replacing phrasing with recommended terms</li> <li><code>code</code> for words from code and/or mathematics that are likely     to be typos in other contexts (such as <code>uint</code>)</li> <li><code>names</code> for valid proper names that might be typos</li> <li><code>en-GB_to_en-US</code> for corrections from <code>en-GB</code> to <code>en-US</code></li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#111-2025-03-26","title":"1.1.1 - 2025-03-26","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<p>Importing from submodules is deprecated, import from the top-level <code>mkdocs_spellcheck</code> instead.</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Replace underscores with dashes when normalizing (3b0d498 by Timoth\u00e9e Mazzucotelli). Issue-27</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Sync API/docs, emit deprecation warnings (e0c647e by Timoth\u00e9e Mazzucotelli).</li> <li>Move modules into internal folder (9b09eae by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2024-05-05","title":"1.1.0 - 2024-05-05","text":"<p>Compare with 1.0.3</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Support Unix filename pattern matching when skipping files (2ae097d by Nicholas Felt). Issue-20, PR-23</li> </ul>"},{"location":"changelog/#103-2024-03-23","title":"1.0.3 - 2024-03-23","text":"<p>Compare with 1.0.2</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Stop using deprecated API of <code>importlib.resources</code> (0c96a56 by Stu Franks). PR-19, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#102-2023-09-05","title":"1.0.2 - 2023-09-05","text":"<p>Compare with 1.0.1</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Prevent loading of unused backends (12062ff by Tobias Ahrens). PR #17</li> </ul>"},{"location":"changelog/#101-2023-08-19","title":"1.0.1 - 2023-08-19","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Remove <code>'s</code> from possessive nouns for spellcheck (1f11985 by Stu Franks). PR #16</li> <li>Retain single quotes that are part of words (8dd8206 by Stu Franks). PR #16</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Stop using deprecated warning filter (ae3a584 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2022-11-24","title":"1.0.0 - 2022-11-24","text":"<p>Compare with 0.2.2</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<p>You must now specify an extra when installing <code>mkdocs-spellcheck</code>:</p> <pre><code>pip install mkdocs-spellcheck[all]         # install all spelling backends\npip install mkdocs-spellcheck[codespell]   # detects common mistakes\npip install mkdocs-spellcheck[symspellpy]  # uses the english dictionary\n</code></pre>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add option to run only when strict mode is enabled (d6520d9 by Timoth\u00e9e Mazzucotelli). PR #15</li> <li>Add <code>codespell</code> backend (bc8e84c by Timoth\u00e9e Mazzucotelli). Issue #11</li> </ul>"},{"location":"changelog/#022-2022-11-02","title":"0.2.2 - 2022-11-02","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Correctly reset HTML stripper state after code block (3db4add by Timoth\u00e9e Mazzucotelli). Issue #13</li> </ul>"},{"location":"changelog/#021-2022-04-11","title":"0.2.1 - 2022-04-11","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Prevent words concatenation (06d36a2 by Timoth\u00e9e Mazzucotelli). Issue #9</li> <li>Warn even when there are no suggestions (f6621f6 by Timoth\u00e9e Mazzucotelli). Issue #12</li> </ul>"},{"location":"changelog/#020-2022-01-29","title":"0.2.0 - 2022-01-29","text":"<p>Compare with 0.1.1</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add <code>max_capital</code> option (be3d48e by Timoth\u00e9e Mazzucotelli). Issue #2</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Don't consider words containing digits (42d42f1 by Timoth\u00e9e Mazzucotelli). Issue #1</li> </ul>"},{"location":"changelog/#011-2022-01-25","title":"0.1.1 - 2022-01-25","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Prefix logs with package name only (7ea8ad9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2022-01-25","title":"0.1.0 - 2022-01-25","text":"<p>Compare with first commit</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Depend on <code>symspellpy</code> (2dc1633 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix pyproject (9f9dc0d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Clean up (e7c0e46 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove useless files (4e85cd0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Implement spell check plugin (3a1367b by Timoth\u00e9e Mazzucotelli).</li> <li>Generate project using pawamoy/copier-pdm template (4b2335e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocs-spellcheck\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocs-spellcheck. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License codespell Fix common misspellings in text files <code>&gt;=2.2.2</code> <code>2.4.1</code> GPL-2.0-only colorama Cross-platform colored terminal text. <code>~=0.4, &gt;=0.4</code> <code>0.4.6</code> BSD License editdistpy Fast Levenshtein and Damerau optimal string alignment algorithms. <code>&gt;=0.1.3</code> <code>0.1.5</code> MIT License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License Jinja2 A very fast and expressive template engine. <code>~=3.0, &gt;=2.11.1</code> <code>3.1.6</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2, &gt;=3.3.6</code> <code>3.7</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1, &gt;=2.0</code> <code>3.0.2</code> BSD License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.5</code> <code>1.6.1</code> BSD-2-Clause mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT packaging Core utilities for Python packages <code>&gt;=24.1, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.7</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT symspellpy Python SymSpell <code>&gt;=6.7.6</code> <code>6.9.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.3</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.26.6</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>~=0.4, &gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.7.1</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.6.3.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.2</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>~=3.0, &gt;=2.11.1</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2, &gt;=3.3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1, &gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.5</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.5</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.1</code> <code>0.1.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.9+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.29.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.8.1.12.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.1, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.7</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2015.7</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.11.2</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20250322</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250326</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9</code> <code>4.13.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.2</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2022, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#mkdocs_spellcheck","title":"<code>mkdocs_spellcheck</code>","text":"<p>MkDocs SpellCheck package.</p> <p>A spell checker plugin for MkDocs.</p> <p>Modules:</p> Name Description <code>backends</code> <p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p> <code>plugin</code> <p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p> <code>words</code> <p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p> <p>Classes:</p> Name Description <code>Backend</code> <p>Abstract class for spelling backends.</p> <code>CodespellBackend</code> <p>Backend for the <code>codespell</code> tool.</p> <code>SpellCheckPlugin</code> <p>A <code>mkdocs</code> plugin.</p> <code>SymspellpyBackend</code> <p>Backend for the <code>symspellpy</code> library.</p> <p>Functions:</p> Name Description <code>get_words</code> <p>Get words in HTML text.</p> <code>load_backend</code> <p>Load the specified backend.</p>"},{"location":"reference/api/#mkdocs_spellcheck.Backend","title":"<code>Backend(config: dict[str, Any], known_words: set[str] | None = None)</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for spelling backends.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>User configuration from <code>mkdocs.yml</code>.</p> required <code>known_words</code> <code>set[str] | None</code> <p>Globally known words.</p> <code>None</code> Subclassed by: <ul> <li> <code></code>\u00a0mkdocs_spellcheck <ul> <li> <code></code>\u00a0CodespellBackend </li> <li> <code></code>\u00a0SymspellpyBackend </li> </ul> </li> </ul> <p>Methods:</p> Name Description <code>check</code> <p>Check a word appearing in a page.</p> Source code in <code>src/mkdocs_spellcheck/_internal/backends/__init__.py</code> <pre><code>@abstractmethod\ndef __init__(self, config: dict[str, Any], known_words: set[str] | None = None) -&gt; None:\n    \"\"\"Initialize the backend.\n\n    Parameters:\n        config: User configuration from `mkdocs.yml`.\n        known_words: Globally known words.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.Backend.check","title":"<code>check(page: Page, word: str) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Check a word appearing in a page.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Page</code> <p>The MkDocs page the word appears in.</p> required <code>word</code> <code>str</code> <p>The word to check.</p> required Source code in <code>src/mkdocs_spellcheck/_internal/backends/__init__.py</code> <pre><code>@abstractmethod\ndef check(self, page: Page, word: str) -&gt; None:\n    \"\"\"Check a word appearing in a page.\n\n    Parameters:\n        page: The MkDocs page the word appears in.\n        word: The word to check.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.CodespellBackend","title":"<code>CodespellBackend(config: dict[str, Any], known_words: set[str] | None = None)</code>","text":"<p>               Bases: <code>Backend</code></p> <p>Backend for the <code>codespell</code> tool.</p> <p>This backend needs to build a list of misspellings based on dictionaries provided by <code>codespell</code> itself.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>User configuration from <code>mkdocs.yml</code>.</p> required <code>known_words</code> <code>set[str] | None</code> <p>Globally known words.</p> <code>None</code> <p>Methods:</p> Name Description <code>check</code> <p>Check a word against the <code>codespell</code> misspellings.</p> <p>Attributes:</p> Name Type Description <code>misspellings</code> <code>dict[str, Misspelling]</code> <p>A mapping of misspelled words to their corrections.</p> Source code in <code>src/mkdocs_spellcheck/_internal/backends/codespell.py</code> <pre><code>def __init__(self, config: dict[str, Any], known_words: set[str] | None = None) -&gt; None:\n    \"\"\"Initialize the `codespell` backend.\n\n    This backend needs to build a list of misspellings based\n    on dictionaries provided by `codespell` itself.\n\n    Parameters:\n        config: User configuration from `mkdocs.yml`.\n        known_words: Globally known words.\n    \"\"\"\n    known_words = known_words or set()\n    use_dictionaries = []\n    for dictionary in config.get(\"dictionaries\", _DEFAULT_DICTS):\n        for builtin in _builtin_dictionaries:\n            if builtin[0] == dictionary:\n                use_dictionaries.append(os.path.join(_data_root, f\"dictionary{builtin[2]}.txt\"))\n\n    self.misspellings: dict[str, Misspelling] = {}\n    \"\"\"A mapping of misspelled words to their corrections.\"\"\"\n\n    for dictionary in use_dictionaries:\n        build_dict(dictionary, self.misspellings, known_words)\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.CodespellBackend.misspellings","title":"<code>misspellings: dict[str, Misspelling] = {}</code>  <code>instance-attribute</code>","text":"<p>A mapping of misspelled words to their corrections.</p>"},{"location":"reference/api/#mkdocs_spellcheck.CodespellBackend.check","title":"<code>check(page: Page, word: str) -&gt; None</code>","text":"<p>Check a word against the <code>codespell</code> misspellings.</p> Source code in <code>src/mkdocs_spellcheck/_internal/backends/codespell.py</code> <pre><code>def check(self, page: Page, word: str) -&gt; None:\n    \"\"\"Check a word against the `codespell` misspellings.\"\"\"\n    if word in self.misspellings:\n        # reason = self.misspellings[word].reason\n        fixword = fix_case(word, self.misspellings[word].data)\n        _logger.warning(f\"(codespell) {page.file.src_path}: Misspelled '{word}', did you mean '{fixword}'?\")\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin","title":"<code>SpellCheckPlugin()</code>","text":"<p>               Bases: <code>BasePlugin[_SpellCheckConfig]</code></p> <p>A <code>mkdocs</code> plugin.</p> <p>This plugin defines the following event hooks:</p> <ul> <li><code>on_config</code></li> <li><code>on_page_content</code></li> </ul> <p>Check the Developing Plugins page of <code>mkdocs</code> for more information about its plugin system.</p> <p>Methods:</p> Name Description <code>on_config</code> <p>Load words to ignore.</p> <code>on_page_content</code> <p>Spell check everything.</p> <p>Attributes:</p> Name Type Description <code>allow_unicode</code> <code>bool</code> <p>Keep unicode characters.</p> <code>backends_config</code> <code>list[str | dict[str, Any]]</code> <p>Backend configuration.</p> <code>ignore_code</code> <code>bool</code> <p>Ignore words in code blocks.</p> <code>known_words</code> <code>set[str]</code> <p>Words to ignore.</p> <code>max_capital</code> <code>int</code> <p>Maximum number of capital letters in a word to consider it.</p> <code>min_length</code> <code>int</code> <p>Minimum word length.</p> <code>run</code> <code>bool</code> <p>Whether to run the plugin.</p> <code>skip_files</code> <code>list[str]</code> <p>Files to skip.</p> <code>strict_only</code> <code>bool</code> <p>Only run in strict mode.</p> Source code in <code>src/mkdocs_spellcheck/_internal/plugin.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.known_words: set[str] = set()\n    \"\"\"Words to ignore.\"\"\"\n    super().__init__()\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.allow_unicode","title":"<code>allow_unicode: bool</code>  <code>instance-attribute</code>","text":"<p>Keep unicode characters.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.backends_config","title":"<code>backends_config: list[str | dict[str, Any]]</code>  <code>instance-attribute</code>","text":"<p>Backend configuration.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.ignore_code","title":"<code>ignore_code: bool</code>  <code>instance-attribute</code>","text":"<p>Ignore words in code blocks.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.known_words","title":"<code>known_words: set[str] = set()</code>  <code>instance-attribute</code>","text":"<p>Words to ignore.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.max_capital","title":"<code>max_capital: int</code>  <code>instance-attribute</code>","text":"<p>Maximum number of capital letters in a word to consider it.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.min_length","title":"<code>min_length: int</code>  <code>instance-attribute</code>","text":"<p>Minimum word length.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.run","title":"<code>run: bool</code>  <code>instance-attribute</code>","text":"<p>Whether to run the plugin.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.skip_files","title":"<code>skip_files: list[str]</code>  <code>instance-attribute</code>","text":"<p>Files to skip.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.strict_only","title":"<code>strict_only: bool</code>  <code>instance-attribute</code>","text":"<p>Only run in strict mode.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.on_config","title":"<code>on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None</code>","text":"<p>Load words to ignore.</p> <p>Hook for the <code>on_config</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>MkDocsConfig</code> <p>The MkDocs config object.</p> required <p>Returns:</p> Type Description <code>MkDocsConfig | None</code> <p>The modified config.</p> Source code in <code>src/mkdocs_spellcheck/_internal/plugin.py</code> <pre><code>def on_config(self, config: MkDocsConfig) -&gt; MkDocsConfig | None:\n    \"\"\"Load words to ignore.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n\n    Arguments:\n        config: The MkDocs config object.\n\n    Returns:\n        The modified config.\n    \"\"\"\n    self.strict_only = self.config[\"strict_only\"]\n    self.backends_config = self.config[\"backends\"]\n    self.skip_files = self.config[\"skip_files\"]\n    self.min_length = self.config[\"min_length\"]\n    self.max_capital = self.config[\"max_capital\"]\n    self.ignore_code = self.config[\"ignore_code\"]\n    self.allow_unicode = self.config[\"allow_unicode\"]\n    self.run = config[\"strict\"] or not self.strict_only\n\n    if not self.run:\n        return config\n\n    known_words = self.config[\"known_words\"]\n    if isinstance(known_words, str):\n        self.known_words |= set(Path(config[\"docs_dir\"], known_words).read_text().splitlines())\n    else:\n        self.known_words |= set(known_words)\n\n    self.backends = {}\n    for backend_conf in self.backends_config:\n        if isinstance(backend_conf, str):\n            backend_name = backend_conf\n            backend_config: dict[str, Any] = {}\n        else:\n            backend_name, backend_config = next(iter(backend_conf.items()))\n        self.backends[backend_name] = load_backend(backend_name)(\n            known_words=self.known_words,\n            config=backend_config,\n        )\n\n    return config\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.SpellCheckPlugin.on_page_content","title":"<code>on_page_content(html: str, page: Page, **kwargs: Any) -&gt; None</code>","text":"<p>Spell check everything.</p> <p>Hook for the <code>on_page_content</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>The HTML text.</p> required <code>page</code> <code>Page</code> <p>The page instance.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> Source code in <code>src/mkdocs_spellcheck/_internal/plugin.py</code> <pre><code>def on_page_content(self, html: str, page: Page, **kwargs: Any) -&gt; None:  # noqa: ARG002\n    \"\"\"Spell check everything.\n\n    Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content).\n\n    Arguments:\n        html: The HTML text.\n        page: The page instance.\n        **kwargs: Additional arguments passed by MkDocs.\n    \"\"\"\n    if self.run and not any(fnmatch(page.file.src_path, pattern) for pattern in self.skip_files):\n        words = get_words(\n            html,\n            known_words=self.known_words,\n            min_length=self.min_length,\n            max_capital=self.max_capital,\n            ignore_code=self.ignore_code,\n            allow_unicode=self.allow_unicode,\n        )\n        for word in words:\n            for backend in self.backends.values():\n                backend.check(page, word)\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.SymspellpyBackend","title":"<code>SymspellpyBackend(config: dict[str, Any], known_words: set[str] | None = None)</code>","text":"<p>               Bases: <code>Backend</code></p> <p>Backend for the <code>symspellpy</code> library.</p> <p>This backend needs to load dictionaries provided by <code>symspellpy</code> itself.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>User configuration from <code>mkdocs.yml</code>.</p> required <code>known_words</code> <code>set[str] | None</code> <p>Globally known words.</p> <code>None</code> <p>Methods:</p> Name Description <code>check</code> <p>Check a word against the <code>symspellpy</code> dictionary.</p> <p>Attributes:</p> Name Type Description <code>spell</code> <p>The <code>symspellpy</code> spell checker.</p> Source code in <code>src/mkdocs_spellcheck/_internal/backends/symspellpy.py</code> <pre><code>def __init__(self, config: dict[str, Any], known_words: set[str] | None = None) -&gt; None:  # noqa: ARG002\n    \"\"\"Initialize the `symspellpy` backend.\n\n    This backend needs to load dictionaries provided\n    by `symspellpy` itself.\n\n    Parameters:\n        config: User configuration from `mkdocs.yml`.\n        known_words: Globally known words.\n    \"\"\"\n    self.spell = SymSpell()\n    \"\"\"The `symspellpy` spell checker.\"\"\"\n    dictionary_res = resources.files(\"symspellpy\").joinpath(\"frequency_dictionary_en_82_765.txt\")\n    with resources.as_file(dictionary_res) as dictionary_path:\n        self.spell.load_dictionary(dictionary_path, 0, 1)\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.SymspellpyBackend.spell","title":"<code>spell = SymSpell()</code>  <code>instance-attribute</code>","text":"<p>The <code>symspellpy</code> spell checker.</p>"},{"location":"reference/api/#mkdocs_spellcheck.SymspellpyBackend.check","title":"<code>check(page: Page, word: str) -&gt; None</code>","text":"<p>Check a word against the <code>symspellpy</code> dictionary.</p> Source code in <code>src/mkdocs_spellcheck/_internal/backends/symspellpy.py</code> <pre><code>def check(self, page: Page, word: str) -&gt; None:\n    \"\"\"Check a word against the `symspellpy` dictionary.\"\"\"\n    suggestions = self.spell.lookup(word, Verbosity.CLOSEST, max_edit_distance=2)\n    if suggestions:\n        candidates = \"', '\".join(suggestion.term for suggestion in suggestions if suggestion.term != word)\n        if candidates:\n            _logger.warning(f\"(symspellpy) {page.file.src_path}: Misspelled '{word}', did you mean '{candidates}'?\")\n    else:\n        _logger.warning(f\"(symspellpy) {page.file.src_path}: Misspelled '{word}', no suggestions\")\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.get_words","title":"<code>get_words(html: str, *, known_words: set[str] | None = None, min_length: int = 2, max_capital: int = 1, ignore_code: bool = True, allow_unicode: bool = True) -&gt; list[str]</code>","text":"<p>Get words in HTML text.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>The HTML text.</p> required <code>known_words</code> <code>set[str] | None</code> <p>Words to exclude.</p> <code>None</code> <code>min_length</code> <code>int</code> <p>Words minimum length.</p> <code>2</code> <code>max_capital</code> <code>int</code> <p>Maximum number of capital letters.</p> <code>1</code> <code>ignore_code</code> <code>bool</code> <p>Ignore words in code tags.</p> <code>True</code> <code>allow_unicode</code> <code>bool</code> <p>Keep unicode characters.</p> <code>True</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of words.</p> Source code in <code>src/mkdocs_spellcheck/_internal/words.py</code> <pre><code>def get_words(\n    html: str,\n    *,\n    known_words: set[str] | None = None,\n    min_length: int = 2,\n    max_capital: int = 1,\n    ignore_code: bool = True,\n    allow_unicode: bool = True,\n) -&gt; list[str]:\n    \"\"\"Get words in HTML text.\n\n    Parameters:\n        html: The HTML text.\n        known_words: Words to exclude.\n        min_length: Words minimum length.\n        max_capital: Maximum number of capital letters.\n        ignore_code: Ignore words in code tags.\n        allow_unicode: Keep unicode characters.\n\n    Returns:\n        A list of words.\n    \"\"\"\n    known_words = known_words or set()\n    keep = partial(_keep_word, min_length=min_length, max_capital=max_capital)\n    filtered = filter(keep, _normalize(_strip_tags(html, ignore_code), allow_unicode).split(\"-\"))\n    words = {word.lower() for word in filtered}\n    return sorted(words - known_words)\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.load_backend","title":"<code>load_backend(name: str) -&gt; type[Backend]</code>","text":"<p>Load the specified backend.</p> <p>This function imports the specified backend and returns its class. It is important not to import the backends at the top level, as they may not be installed.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the backend to load.</p> required <p>Returns:</p> Type Description <code>type[Backend]</code> <p>The backend class.</p> Source code in <code>src/mkdocs_spellcheck/_internal/plugin.py</code> <pre><code>def load_backend(name: str) -&gt; type[Backend]:\n    \"\"\"Load the specified backend.\n\n    This function imports the specified backend and returns its class.\n    It is important not to import the backends at the top level, as\n    they may not be installed.\n\n    Arguments:\n        name: The name of the backend to load.\n\n    Returns:\n        The backend class.\n    \"\"\"\n    if name == \"symspellpy\":\n        from mkdocs_spellcheck._internal.backends import symspellpy\n\n        return symspellpy.SymspellpyBackend\n\n    if name == \"codespell\":\n        from mkdocs_spellcheck._internal.backends import codespell\n\n        return codespell.CodespellBackend\n\n    raise ValueError(f\"Unknown backend: {name}\")\n</code></pre>"},{"location":"reference/api/#mkdocs_spellcheck.backends","title":"<code>backends</code>","text":"<p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p> <p>Modules:</p> Name Description <code>codespell</code> <p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p> <code>symspellpy</code> <p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p>"},{"location":"reference/api/#mkdocs_spellcheck.backends.codespell","title":"<code>codespell</code>","text":"<p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p>"},{"location":"reference/api/#mkdocs_spellcheck.backends.symspellpy","title":"<code>symspellpy</code>","text":"<p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p>"},{"location":"reference/api/#mkdocs_spellcheck.plugin","title":"<code>plugin</code>","text":"<p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p>"},{"location":"reference/api/#mkdocs_spellcheck.words","title":"<code>words</code>","text":"<p>Deprecated. Import directly from <code>mkdocs_spellcheck</code> instead.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}