{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkDocs SpellCheck \u00a4 A spell checker plugin for MkDocs. Requirements \u00a4 MkDocs SpellCheck requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12 Installation \u00a4 pip install mkdocs-spellcheck Usage \u00a4 # mkdocs.yml plugins : - search - spellcheck : # known_words can also be a list of words known_words : known_words.txt # ignore words in <code> tags ignore_code : yes # minimum length of words to consider min_length : 2 # maximum number of capital letters in a word max_capital : 1 # keep unicode characters allow_unicode : no # skip files entirely skip_files : - credits.md - coverage.md","title":"Overview"},{"location":"#mkdocs-spellcheck","text":"A spell checker plugin for MkDocs.","title":"MkDocs SpellCheck"},{"location":"#requirements","text":"MkDocs SpellCheck requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12","title":"Requirements"},{"location":"#installation","text":"pip install mkdocs-spellcheck","title":"Installation"},{"location":"#usage","text":"# mkdocs.yml plugins : - search - spellcheck : # known_words can also be a list of words known_words : known_words.txt # ignore words in <code> tags ignore_code : yes # minimum length of words to consider min_length : 2 # maximum number of capital letters in a word max_capital : 1 # keep unicode characters allow_unicode : no # skip files entirely skip_files : - credits.md - coverage.md","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.2.0 - 2022-01-29 \u00a4 Compare with 0.1.1 Features \u00a4 Add max_capital option ( be3d48e by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Don't consider words containing digits ( 42d42f1 by Timoth\u00e9e Mazzucotelli). References: #1 0.1.1 - 2022-01-25 \u00a4 Compare with 0.1.0 Code Refactoring \u00a4 Prefix logs with package name only ( 7ea8ad9 by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2022-01-25 \u00a4 Compare with first commit Build \u00a4 Depend on symspellpy ( 2dc1633 by Timoth\u00e9e Mazzucotelli). Fix pyproject ( 9f9dc0d by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Clean up ( e7c0e46 by Timoth\u00e9e Mazzucotelli). Remove useless files ( 4e85cd0 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Implement spell check plugin ( 3a1367b by Timoth\u00e9e Mazzucotelli). Generate project using pawamoy/copier-pdm template ( 4b2335e by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#020-2022-01-29","text":"Compare with 0.1.1","title":"0.2.0 - 2022-01-29"},{"location":"changelog/#features","text":"Add max_capital option ( be3d48e by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#code-refactoring","text":"Don't consider words containing digits ( 42d42f1 by Timoth\u00e9e Mazzucotelli). References: #1","title":"Code Refactoring"},{"location":"changelog/#011-2022-01-25","text":"Compare with 0.1.0","title":"0.1.1 - 2022-01-25"},{"location":"changelog/#code-refactoring_1","text":"Prefix logs with package name only ( 7ea8ad9 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#010-2022-01-25","text":"Compare with first commit","title":"0.1.0 - 2022-01-25"},{"location":"changelog/#build","text":"Depend on symspellpy ( 2dc1633 by Timoth\u00e9e Mazzucotelli). Fix pyproject ( 9f9dc0d by Timoth\u00e9e Mazzucotelli).","title":"Build"},{"location":"changelog/#code-refactoring_2","text":"Clean up ( e7c0e46 by Timoth\u00e9e Mazzucotelli). Remove useless files ( 4e85cd0 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features_1","text":"Implement spell check plugin ( 3a1367b by Timoth\u00e9e Mazzucotelli). Generate project using pawamoy/copier-pdm template ( 4b2335e by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd mkdocs-spellcheck make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd mkdocs-spellcheck make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build mkdocs-spellcheck . Thank you! python | pdm | copier-pdm Direct dependencies \u00a4 autoflake | black | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | isort | mkdocs | mkdocs-coverage | mkdocs-gen-files | mkdocs-literate-nav | mkdocs-material | mkdocs-section-index | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | safety | symspellpy | toml | types-markdown | types-toml | wps-light Indirect dependencies \u00a4 ansimarkup | astor | astunparse | atomicwrites | attrs | bandit | cached-property | certifi | charset-normalizer | click | colorama | coverage | dparse | editdistpy | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | gitpython | idna | importlib-metadata | iniconfig | jinja2 | markdown | markupsafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pbr | platformdirs | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | pyyaml | pyyaml-env-tag | requests | semver | setuptools | six | smmap | snowballstemmer | stevedore | termcolor | tomli | typed-ast | types-setuptools | typing-extensions | urllib3 | watchdog | wheel | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build mkdocs-spellcheck . Thank you! python | pdm | copier-pdm","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | black | darglint | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | isort | mkdocs | mkdocs-coverage | mkdocs-gen-files | mkdocs-literate-nav | mkdocs-material | mkdocs-section-index | mkdocstrings | mypy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | safety | symspellpy | toml | types-markdown | types-toml | wps-light","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | astor | astunparse | atomicwrites | attrs | bandit | cached-property | certifi | charset-normalizer | click | colorama | coverage | dparse | editdistpy | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | gitpython | idna | importlib-metadata | iniconfig | jinja2 | markdown | markupsafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pbr | platformdirs | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | pyyaml | pyyaml-env-tag | requests | semver | setuptools | six | smmap | snowballstemmer | stevedore | termcolor | tomli | typed-ast | types-setuptools | typing-extensions | urllib3 | watchdog | wheel | zipp More credits from the author","title":"Indirect dependencies"},{"location":"license/","text":"ISC License Copyright (c) 2022, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"mkdocs_spellcheck loggers plugin words","title":"SUMMARY"},{"location":"reference/mkdocs_spellcheck/","text":"MkDocs SpellCheck package. A spell checker plugin for MkDocs.","title":"mkdocs_spellcheck"},{"location":"reference/mkdocs_spellcheck/loggers/","text":"Logging functions. LoggerAdapter ( LoggerAdapter ) \u00a4 A logger adapter to prefix messages. Source code in mkdocs_spellcheck/loggers.py class LoggerAdapter ( logging . LoggerAdapter ): \"\"\"A logger adapter to prefix messages.\"\"\" def __init__ ( self , prefix : str , logger ): \"\"\"Initialize the object. Arguments: prefix: The string to insert in front of every message. logger: The logger instance. \"\"\" super () . __init__ ( logger , {}) self . prefix = prefix def process ( self , msg : str , kwargs ) -> tuple [ str , Any ]: \"\"\"Process the message. Arguments: msg: The message: kwargs: Remaining arguments. Returns: The processed message. \"\"\" return f \" { self . prefix } : { msg } \" , kwargs __init__ ( self , prefix , logger ) special \u00a4 Initialize the object. Parameters: Name Type Description Default prefix str The string to insert in front of every message. required logger The logger instance. required Source code in mkdocs_spellcheck/loggers.py def __init__ ( self , prefix : str , logger ): \"\"\"Initialize the object. Arguments: prefix: The string to insert in front of every message. logger: The logger instance. \"\"\" super () . __init__ ( logger , {}) self . prefix = prefix process ( self , msg , kwargs ) \u00a4 Process the message. Parameters: Name Type Description Default msg str The message: required kwargs Remaining arguments. required Returns: Type Description tuple[str, Any] The processed message. Source code in mkdocs_spellcheck/loggers.py def process ( self , msg : str , kwargs ) -> tuple [ str , Any ]: \"\"\"Process the message. Arguments: msg: The message: kwargs: Remaining arguments. Returns: The processed message. \"\"\" return f \" { self . prefix } : { msg } \" , kwargs get_logger ( name ) \u00a4 Return a pre-configured logger. Parameters: Name Type Description Default name str The name to use with logging.getLogger . required Returns: Type Description LoggerAdapter A logger configured to work well in MkDocs. Source code in mkdocs_spellcheck/loggers.py def get_logger ( name : str ) -> LoggerAdapter : \"\"\"Return a pre-configured logger. Arguments: name: The name to use with `logging.getLogger`. Returns: A logger configured to work well in MkDocs. \"\"\" logger = logging . getLogger ( f \"mkdocs.plugins. { name } \" ) logger . addFilter ( warning_filter ) return LoggerAdapter ( name . split ( \".\" , 1 )[ 0 ], logger )","title":"loggers"},{"location":"reference/mkdocs_spellcheck/loggers/#mkdocs_spellcheck.loggers.LoggerAdapter","text":"A logger adapter to prefix messages. Source code in mkdocs_spellcheck/loggers.py class LoggerAdapter ( logging . LoggerAdapter ): \"\"\"A logger adapter to prefix messages.\"\"\" def __init__ ( self , prefix : str , logger ): \"\"\"Initialize the object. Arguments: prefix: The string to insert in front of every message. logger: The logger instance. \"\"\" super () . __init__ ( logger , {}) self . prefix = prefix def process ( self , msg : str , kwargs ) -> tuple [ str , Any ]: \"\"\"Process the message. Arguments: msg: The message: kwargs: Remaining arguments. Returns: The processed message. \"\"\" return f \" { self . prefix } : { msg } \" , kwargs","title":"LoggerAdapter"},{"location":"reference/mkdocs_spellcheck/loggers/#mkdocs_spellcheck.loggers.LoggerAdapter.__init__","text":"Initialize the object. Parameters: Name Type Description Default prefix str The string to insert in front of every message. required logger The logger instance. required Source code in mkdocs_spellcheck/loggers.py def __init__ ( self , prefix : str , logger ): \"\"\"Initialize the object. Arguments: prefix: The string to insert in front of every message. logger: The logger instance. \"\"\" super () . __init__ ( logger , {}) self . prefix = prefix","title":"__init__()"},{"location":"reference/mkdocs_spellcheck/loggers/#mkdocs_spellcheck.loggers.LoggerAdapter.process","text":"Process the message. Parameters: Name Type Description Default msg str The message: required kwargs Remaining arguments. required Returns: Type Description tuple[str, Any] The processed message. Source code in mkdocs_spellcheck/loggers.py def process ( self , msg : str , kwargs ) -> tuple [ str , Any ]: \"\"\"Process the message. Arguments: msg: The message: kwargs: Remaining arguments. Returns: The processed message. \"\"\" return f \" { self . prefix } : { msg } \" , kwargs","title":"process()"},{"location":"reference/mkdocs_spellcheck/loggers/#mkdocs_spellcheck.loggers.get_logger","text":"Return a pre-configured logger. Parameters: Name Type Description Default name str The name to use with logging.getLogger . required Returns: Type Description LoggerAdapter A logger configured to work well in MkDocs. Source code in mkdocs_spellcheck/loggers.py def get_logger ( name : str ) -> LoggerAdapter : \"\"\"Return a pre-configured logger. Arguments: name: The name to use with `logging.getLogger`. Returns: A logger configured to work well in MkDocs. \"\"\" logger = logging . getLogger ( f \"mkdocs.plugins. { name } \" ) logger . addFilter ( warning_filter ) return LoggerAdapter ( name . split ( \".\" , 1 )[ 0 ], logger )","title":"get_logger()"},{"location":"reference/mkdocs_spellcheck/plugin/","text":"MkDocs SpellCheck package. A spell checker plugin for MkDocs. SpellCheckPlugin ( BasePlugin ) \u00a4 A mkdocs plugin. This plugin defines the following event hooks: on_config on_page_content Check the Developing Plugins page of mkdocs for more information about its plugin system. Source code in mkdocs_spellcheck/plugin.py class SpellCheckPlugin ( BasePlugin ): \"\"\"A `mkdocs` plugin. This plugin defines the following event hooks: - `on_config` - `on_page_content` Check the [Developing Plugins](https://www.mkdocs.org/user-guide/plugins/#developing-plugins) page of `mkdocs` for more information about its plugin system. \"\"\" config_scheme : tuple [ tuple [ str , MkType ], ... ] = ( ( \"known_words\" , MkType (( str , list ), default = [])), ( \"skip_files\" , MkType ( list , default = [])), ( \"min_length\" , MkType ( int , default = 2 )), ( \"max_capital\" , MkType ( int , default = 1 )), ( \"ignore_code\" , MkType ( bool , default = True )), ( \"allow_unicode\" , MkType ( bool , default = False )), ) def __init__ ( self ) -> None : # noqa: D107 self . known_words : set [ str ] = set () self . spell : SymSpell = None super () . __init__ () def on_config ( self , config : Config , ** kwargs ) -> Config : \"\"\"Load words to ignore. Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config). Arguments: config: The MkDocs config object. kwargs: Additional arguments passed by MkDocs. Returns: The modified config. \"\"\" self . skip_files = self . config [ \"skip_files\" ] self . min_length = self . config [ \"min_length\" ] self . max_capital = self . config [ \"max_capital\" ] self . ignore_code = self . config [ \"ignore_code\" ] self . allow_unicode = self . config [ \"allow_unicode\" ] known_words = self . config [ \"known_words\" ] if isinstance ( known_words , str ): self . known_words |= set ( Path ( config [ \"docs_dir\" ], known_words ) . read_text () . splitlines ()) else : self . known_words |= set ( known_words ) self . spell = SymSpell () with resources . path ( \"symspellpy\" , \"frequency_dictionary_en_82_765.txt\" ) as dictionary_path : self . spell . load_dictionary ( dictionary_path , 0 , 1 ) return config def on_page_content ( self , html : str , page : Page , ** kwargs ) -> None : \"\"\"Spell check everything. Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content). Arguments: html: The HTML text. page: The page instance. kwargs: Additional arguments passed by MkDocs. \"\"\" if page . file . src_path not in self . skip_files : words = get_words ( html , known_words = self . known_words , min_length = self . min_length , max_capital = self . max_capital , ignore_code = self . ignore_code , allow_unicode = self . allow_unicode , ) for word in words : suggestions = self . spell . lookup ( word , Verbosity . CLOSEST , max_edit_distance = 2 ) candidates = \"', '\" . join ( suggestion . term for suggestion in suggestions if suggestion . term != word ) if candidates : logger . warning ( f \" { page . file . src_path } : Misspelled ' { word } ', did you mean ' { candidates } '?\" ) on_config ( self , config , ** kwargs ) \u00a4 Load words to ignore. Hook for the on_config event . Parameters: Name Type Description Default config Config The MkDocs config object. required kwargs Additional arguments passed by MkDocs. {} Returns: Type Description Config The modified config. Source code in mkdocs_spellcheck/plugin.py def on_config ( self , config : Config , ** kwargs ) -> Config : \"\"\"Load words to ignore. Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config). Arguments: config: The MkDocs config object. kwargs: Additional arguments passed by MkDocs. Returns: The modified config. \"\"\" self . skip_files = self . config [ \"skip_files\" ] self . min_length = self . config [ \"min_length\" ] self . max_capital = self . config [ \"max_capital\" ] self . ignore_code = self . config [ \"ignore_code\" ] self . allow_unicode = self . config [ \"allow_unicode\" ] known_words = self . config [ \"known_words\" ] if isinstance ( known_words , str ): self . known_words |= set ( Path ( config [ \"docs_dir\" ], known_words ) . read_text () . splitlines ()) else : self . known_words |= set ( known_words ) self . spell = SymSpell () with resources . path ( \"symspellpy\" , \"frequency_dictionary_en_82_765.txt\" ) as dictionary_path : self . spell . load_dictionary ( dictionary_path , 0 , 1 ) return config on_page_content ( self , html , page , ** kwargs ) \u00a4 Spell check everything. Hook for the on_page_content event . Parameters: Name Type Description Default html str The HTML text. required page Page The page instance. required kwargs Additional arguments passed by MkDocs. {} Source code in mkdocs_spellcheck/plugin.py def on_page_content ( self , html : str , page : Page , ** kwargs ) -> None : \"\"\"Spell check everything. Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content). Arguments: html: The HTML text. page: The page instance. kwargs: Additional arguments passed by MkDocs. \"\"\" if page . file . src_path not in self . skip_files : words = get_words ( html , known_words = self . known_words , min_length = self . min_length , max_capital = self . max_capital , ignore_code = self . ignore_code , allow_unicode = self . allow_unicode , ) for word in words : suggestions = self . spell . lookup ( word , Verbosity . CLOSEST , max_edit_distance = 2 ) candidates = \"', '\" . join ( suggestion . term for suggestion in suggestions if suggestion . term != word ) if candidates : logger . warning ( f \" { page . file . src_path } : Misspelled ' { word } ', did you mean ' { candidates } '?\" )","title":"plugin"},{"location":"reference/mkdocs_spellcheck/plugin/#mkdocs_spellcheck.plugin.SpellCheckPlugin","text":"A mkdocs plugin. This plugin defines the following event hooks: on_config on_page_content Check the Developing Plugins page of mkdocs for more information about its plugin system. Source code in mkdocs_spellcheck/plugin.py class SpellCheckPlugin ( BasePlugin ): \"\"\"A `mkdocs` plugin. This plugin defines the following event hooks: - `on_config` - `on_page_content` Check the [Developing Plugins](https://www.mkdocs.org/user-guide/plugins/#developing-plugins) page of `mkdocs` for more information about its plugin system. \"\"\" config_scheme : tuple [ tuple [ str , MkType ], ... ] = ( ( \"known_words\" , MkType (( str , list ), default = [])), ( \"skip_files\" , MkType ( list , default = [])), ( \"min_length\" , MkType ( int , default = 2 )), ( \"max_capital\" , MkType ( int , default = 1 )), ( \"ignore_code\" , MkType ( bool , default = True )), ( \"allow_unicode\" , MkType ( bool , default = False )), ) def __init__ ( self ) -> None : # noqa: D107 self . known_words : set [ str ] = set () self . spell : SymSpell = None super () . __init__ () def on_config ( self , config : Config , ** kwargs ) -> Config : \"\"\"Load words to ignore. Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config). Arguments: config: The MkDocs config object. kwargs: Additional arguments passed by MkDocs. Returns: The modified config. \"\"\" self . skip_files = self . config [ \"skip_files\" ] self . min_length = self . config [ \"min_length\" ] self . max_capital = self . config [ \"max_capital\" ] self . ignore_code = self . config [ \"ignore_code\" ] self . allow_unicode = self . config [ \"allow_unicode\" ] known_words = self . config [ \"known_words\" ] if isinstance ( known_words , str ): self . known_words |= set ( Path ( config [ \"docs_dir\" ], known_words ) . read_text () . splitlines ()) else : self . known_words |= set ( known_words ) self . spell = SymSpell () with resources . path ( \"symspellpy\" , \"frequency_dictionary_en_82_765.txt\" ) as dictionary_path : self . spell . load_dictionary ( dictionary_path , 0 , 1 ) return config def on_page_content ( self , html : str , page : Page , ** kwargs ) -> None : \"\"\"Spell check everything. Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content). Arguments: html: The HTML text. page: The page instance. kwargs: Additional arguments passed by MkDocs. \"\"\" if page . file . src_path not in self . skip_files : words = get_words ( html , known_words = self . known_words , min_length = self . min_length , max_capital = self . max_capital , ignore_code = self . ignore_code , allow_unicode = self . allow_unicode , ) for word in words : suggestions = self . spell . lookup ( word , Verbosity . CLOSEST , max_edit_distance = 2 ) candidates = \"', '\" . join ( suggestion . term for suggestion in suggestions if suggestion . term != word ) if candidates : logger . warning ( f \" { page . file . src_path } : Misspelled ' { word } ', did you mean ' { candidates } '?\" )","title":"SpellCheckPlugin"},{"location":"reference/mkdocs_spellcheck/plugin/#mkdocs_spellcheck.plugin.SpellCheckPlugin.on_config","text":"Load words to ignore. Hook for the on_config event . Parameters: Name Type Description Default config Config The MkDocs config object. required kwargs Additional arguments passed by MkDocs. {} Returns: Type Description Config The modified config. Source code in mkdocs_spellcheck/plugin.py def on_config ( self , config : Config , ** kwargs ) -> Config : \"\"\"Load words to ignore. Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config). Arguments: config: The MkDocs config object. kwargs: Additional arguments passed by MkDocs. Returns: The modified config. \"\"\" self . skip_files = self . config [ \"skip_files\" ] self . min_length = self . config [ \"min_length\" ] self . max_capital = self . config [ \"max_capital\" ] self . ignore_code = self . config [ \"ignore_code\" ] self . allow_unicode = self . config [ \"allow_unicode\" ] known_words = self . config [ \"known_words\" ] if isinstance ( known_words , str ): self . known_words |= set ( Path ( config [ \"docs_dir\" ], known_words ) . read_text () . splitlines ()) else : self . known_words |= set ( known_words ) self . spell = SymSpell () with resources . path ( \"symspellpy\" , \"frequency_dictionary_en_82_765.txt\" ) as dictionary_path : self . spell . load_dictionary ( dictionary_path , 0 , 1 ) return config","title":"on_config()"},{"location":"reference/mkdocs_spellcheck/plugin/#mkdocs_spellcheck.plugin.SpellCheckPlugin.on_page_content","text":"Spell check everything. Hook for the on_page_content event . Parameters: Name Type Description Default html str The HTML text. required page Page The page instance. required kwargs Additional arguments passed by MkDocs. {} Source code in mkdocs_spellcheck/plugin.py def on_page_content ( self , html : str , page : Page , ** kwargs ) -> None : \"\"\"Spell check everything. Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content). Arguments: html: The HTML text. page: The page instance. kwargs: Additional arguments passed by MkDocs. \"\"\" if page . file . src_path not in self . skip_files : words = get_words ( html , known_words = self . known_words , min_length = self . min_length , max_capital = self . max_capital , ignore_code = self . ignore_code , allow_unicode = self . allow_unicode , ) for word in words : suggestions = self . spell . lookup ( word , Verbosity . CLOSEST , max_edit_distance = 2 ) candidates = \"', '\" . join ( suggestion . term for suggestion in suggestions if suggestion . term != word ) if candidates : logger . warning ( f \" { page . file . src_path } : Misspelled ' { word } ', did you mean ' { candidates } '?\" )","title":"on_page_content()"},{"location":"reference/mkdocs_spellcheck/words/","text":"This module contains a function to retrieve words from HTML text. get_words ( html , * , known_words = None , min_length = 2 , max_capital = 1 , ignore_code = True , allow_unicode = True ) \u00a4 Get words in HTML text. Parameters: Name Type Description Default html str The HTML text. required known_words set[str] | None Words to exclude. None min_length int Words minimum length. 2 max_capital int Maximum number of capital letters. 1 ignore_code bool Ignore words in code tags. True allow_unicode bool Keep unicode characters. True Returns: Type Description list[str] A list of words. Source code in mkdocs_spellcheck/words.py def get_words ( html : str , * , known_words : set [ str ] | None = None , min_length : int = 2 , max_capital : int = 1 , ignore_code : bool = True , allow_unicode : bool = True , ) -> list [ str ]: \"\"\"Get words in HTML text. Parameters: html: The HTML text. known_words: Words to exclude. min_length: Words minimum length. max_capital: Maximum number of capital letters. ignore_code: Ignore words in code tags. allow_unicode: Keep unicode characters. Returns: A list of words. \"\"\" known_words = known_words or set () keep = partial ( _keep_word , min_length = min_length , max_capital = max_capital ) filtered = filter ( keep , _normalize ( _strip_tags ( html , ignore_code ), allow_unicode ) . split ( \"-\" )) words = { word . lower () for word in filtered } return sorted ( words - known_words )","title":"words"},{"location":"reference/mkdocs_spellcheck/words/#mkdocs_spellcheck.words.get_words","text":"Get words in HTML text. Parameters: Name Type Description Default html str The HTML text. required known_words set[str] | None Words to exclude. None min_length int Words minimum length. 2 max_capital int Maximum number of capital letters. 1 ignore_code bool Ignore words in code tags. True allow_unicode bool Keep unicode characters. True Returns: Type Description list[str] A list of words. Source code in mkdocs_spellcheck/words.py def get_words ( html : str , * , known_words : set [ str ] | None = None , min_length : int = 2 , max_capital : int = 1 , ignore_code : bool = True , allow_unicode : bool = True , ) -> list [ str ]: \"\"\"Get words in HTML text. Parameters: html: The HTML text. known_words: Words to exclude. min_length: Words minimum length. max_capital: Maximum number of capital letters. ignore_code: Ignore words in code tags. allow_unicode: Keep unicode characters. Returns: A list of words. \"\"\" known_words = known_words or set () keep = partial ( _keep_word , min_length = min_length , max_capital = max_capital ) filtered = filter ( keep , _normalize ( _strip_tags ( html , ignore_code ), allow_unicode ) . split ( \"-\" )) words = { word . lower () for word in filtered } return sorted ( words - known_words )","title":"get_words()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}